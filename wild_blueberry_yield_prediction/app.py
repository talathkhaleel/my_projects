import streamlit as st 
import numpy as np 
import pandas as pd
import joblib
from sklearn.ensemble import ExtraTreesRegressor
from prediction import get_prediction




# loading the model
model_loading = joblib.load(r"extra_tree_model.joblib")

st.set_page_config(layout= "wide") 

# containers divide the page in horizontal manner into various sections. Likewise columns divide the page into vertical sections 
# header = st.beta_container()
# dataset = st.beta_container()
# features = st.beta_container() - to specify reasons for feature engineering and why certain features were selected
# model_training = st.beta_container()


# with header: setting up the page

st.title("Wild Blueberry Yield Prediction")
st.text("The target feature is yield which is a continuous variable. The task is to classify this variable \n"
        "based on the other 17 features step-by-step by going through each day's task. The evaluation metrics will be RMSE score")

# with dataset
st.header("Predicting the yield of wild blueberry based on data received which influences the output")
st.text("The dataset used for predictive modelling was generated by the Wild Blueberry Pollination Simulation Model, which is an open-source,\n" 
        "spatially-explicit computer simulation program, that enables exploration of how various factors, including plant spatial arrangement,\n"
        "outcrossing and self-pollination, bee species compositions and weather conditions, in isolation and combination, \n"
        "affect pollination efficiency and yield of the wild blueberry agro-ecosystem. The simulation model has been validated by \n"
        "the field observation and experimental data collected in Maine USA and Canadian Maritimes during the last 30 years \n"
        "and now is a useful tool for hypothesis testing and theory development for wild blueberry pollination researches.")





# with features
st.header("Details on features in the dataset")
st.subheader("List of features **before feature engineering and feature selection**")
wild_berry_df = pd.read_csv("wild_blueberry_yield_before_preprocessing.csv")
st.subheader("Glimpse of dataset (in raw form) used for predicting yield")
st.write(wild_berry_df.sample(5))


st.subheader("List of features **after feature engineering and feature selection**")
wild_berry_df_after_preprocessing = pd.read_csv("wild_blueberry_yield_after_preprocessing.csv")
st.subheader("Glimpse of processed dataset used for predicting yield")
st.write(wild_berry_df_after_preprocessing.sample(5))

st.markdown("### **Target variable : yield**")

size = wild_berry_df_after_preprocessing["clonesize"]
honeybee = wild_berry_df_after_preprocessing["honeybee"]
bumbles = wild_berry_df_after_preprocessing["bumbles"]
andrena = wild_berry_df_after_preprocessing["andrena"]
osmia = wild_berry_df_after_preprocessing["osmia"]
averageOfUpperTRange= wild_berry_df_after_preprocessing["AverageOfUpperTRange"]
averageOfLowerTRange = wild_berry_df_after_preprocessing ["AverageOfLowerTRange"]
avg_raining_days = wild_berry_df_after_preprocessing["AverageRainingDays"]

def main():
        with st.form("Prediction form"): # Creates an interactive form such as google forms or Microsoft forms
                st.subheader("Please give in your inputs:")
                
                size = st.slider("Clonesize", min_value=wild_berry_df_after_preprocessing["clonesize"].min(), max_value=wild_berry_df_after_preprocessing["clonesize"].max(), value= wild_berry_df_after_preprocessing["clonesize"].min(), format= "%f")
                osmia = st.slider("Osmia bee impact",min_value=wild_berry_df_after_preprocessing["osmia"].min(), max_value=wild_berry_df_after_preprocessing["osmia"].max(), value= wild_berry_df_after_preprocessing["osmia"].min(), format= "%f")
                avg_raining_days = st.slider("AverageRainingDays", min_value=wild_berry_df_after_preprocessing["AverageRainingDays"].min(), max_value=wild_berry_df_after_preprocessing["AverageRainingDays"].max(), value= wild_berry_df_after_preprocessing["AverageRainingDays"].min(), format= "%f")
                
                
                submit = st.form_submit_button("Predict")
                
        if submit:
                
                data = np.array([size, honeybee[0], bumbles[0], andrena[0], osmia, averageOfUpperTRange[0], averageOfLowerTRange[0], avg_raining_days]).reshape(1, -1)
                
                prediction = get_prediction(data=data, model=model_loading)
                
                st.markdown(f"## The predicted yield is:  {prediction[0]}")
                

if __name__ == "__main__":
        main()                
                
                
                
                
                
                

